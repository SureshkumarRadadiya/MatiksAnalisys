# -*- coding: utf-8 -*-
"""MatiksAnalisys.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qHrNDQwNg0a8koWNCWyWq88zVOghLiZJ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

df = pd.read_excel("/content/Matiks - Data Analyst Data.xlsx")

df.head()

df.describe()

df.isnull().sum()

df.info()

""" ## Prepare Date Fields"""

df['Last_Login_Date'] = df['Last_Login'].dt.date
df['Week'] = df['Last_Login'].dt.to_period('W').apply(lambda r: r.start_time)
df['Month'] = df['Last_Login'].dt.to_period('M').dt.to_timestamp()

df['Last_Login_Date']

df['Week']

df['Month'].head()

"""## Calculate DAU/WAU/MAU"""

dau = df.groupby('Last_Login_Date')['User_ID'].nunique().reset_index(name='DAU')
wau = df.groupby('Week')['User_ID'].nunique().reset_index(name='WAU')
mau = df.groupby('Month')['User_ID'].nunique().reset_index(name='MAU')

print(dau)
print(wau)
print(mau)

"""## Revenue Trend Over Time"""

df['Month'] = df['Last_Login'].dt.to_period('M').dt.to_timestamp()
monthly_revenue = df.groupby('Month')['Total_Revenue_USD'].sum().reset_index()

monthly_revenue

import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.plot(monthly_revenue['Month'], monthly_revenue['Total_Revenue_USD'], marker='o', linestyle='-')

plt.xlabel("Month")
plt.ylabel("Total Revenue (USD)")
plt.title("Monthly Revenue Trends")
plt.xticks(rotation=45)
plt.grid()
plt.show()

df['Week'] = df['Last_Login'].dt.to_period('W').apply(lambda r: r.start_time)
weekly_revenue = df.groupby('Week')['Total_Revenue_USD'].sum().reset_index()

weekly_revenue

import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.plot(weekly_revenue['Week'], weekly_revenue['Total_Revenue_USD'], marker='o', linestyle='-')
plt.xlabel("Week")
plt.ylabel("Total Revenue (USD)")
plt.title("Weekly Revenue Trends")
plt.xticks(rotation=45)
plt.grid()
plt.show()

"""## Revenue Breakdown

## Device Type
"""

revenue_by_device = df.groupby('Device_Type')['Total_Revenue_USD'].sum().reset_index()

print(revenue_by_device)

import seaborn as sns
import matplotlib.pyplot as plt

sns.set_style("whitegrid")
plt.figure(figsize=(8,5))

# Creating the bar plot
sns.barplot(x="Device_Type", y="Total_Revenue_USD", data=revenue_by_device, hue="Device_Type", palette="Blues", legend=False)

# Customizing the labels and title
plt.xlabel("Device Type")
plt.ylabel("Total Revenue (USD)")
plt.title("Revenue Breakdown by Device Type")
plt.xticks(rotation=45)

plt.show()

engagement_by_device = df.groupby('Device_Type').agg({
    'User_ID': 'nunique',
    'Total_Play_Sessions': 'mean',
    'Total_Hours_Played': 'mean',
    'Avg_Session_Duration_Min': 'mean'
}).reset_index().rename(columns={'User_ID': 'Unique_Users'})

print(engagement_by_device)

sns.heatmap(engagement_by_device.drop(columns=["Device_Type"]).corr(), annot=True, cmap="Blues")
plt.title("Engagement Metric Correlations")
plt.show()

"""## User Segment"""

revenue_by_tier = df.groupby('Subscription_Tier')['Total_Revenue_USD'].sum().reset_index()

revenue_by_tier

import matplotlib.pyplot as plt

labels = revenue_by_tier["Subscription_Tier"]
sizes = revenue_by_tier["Total_Revenue_USD"]

plt.figure(figsize=(6,6))
plt.pie(sizes, labels=labels, autopct="%1.1f%%", colors=["lightblue", "orange", "green"], startangle=90)
plt.title("Revenue Breakdown by Subscription Tier")
plt.show()

revenue_by_rank = df.groupby('Rank_Tier')['Total_Revenue_USD'].sum().reset_index()

revenue_by_rank

import matplotlib.pyplot as plt

labels = revenue_by_rank["Rank_Tier"]
sizes = revenue_by_rank["Total_Revenue_USD"]

plt.figure(figsize=(6,6))
plt.pie(sizes, labels=labels, autopct="%1.1f%%", colors=["lightblue", "orange", "green", "red"], startangle=90)
plt.title("Revenue Breakdown by Rank Tier")
plt.show()

"""## Preferred Game Mode"""

revenue_by_mode = df.groupby('Preferred_Game_Mode')['Total_Revenue_USD'].sum().reset_index()

revenue_by_mode

import matplotlib.pyplot as plt

labels = revenue_by_mode["Preferred_Game_Mode"]
sizes = revenue_by_mode["Total_Revenue_USD"]

plt.figure(figsize=(6,6))
plt.pie(sizes, labels=labels, autopct="%1.1f%%", colors=["lightblue", "orange", "green", "red"], startangle=90)
plt.title("Revenue Breakdown by Game Mode")
plt.show()

engagement_by_mode = df.groupby('Preferred_Game_Mode').agg({
    'User_ID': 'nunique',
    'Total_Play_Sessions': 'mean',
    'Total_Hours_Played': 'mean',
    'Avg_Session_Duration_Min': 'mean'
}).reset_index().rename(columns={'User_ID': 'Unique_Users'})

engagement_by_mode

import plotly.express as px

# Create stacked bar chart
fig = px.bar(
    engagement_by_mode,
    x="Preferred_Game_Mode",
    y=["Total_Play_Sessions", "Total_Hours_Played", "Avg_Session_Duration_Min"],
    labels={"value": "Engagement Metrics"},
    title="Stacked Bar Chart: Engagement by Game Mode",
    barmode="stack"
)

fig.show()

"""## Key Behavioral Metrics"""

df['Estimated_Active_Days'] = df['Total_Hours_Played'] / (df['Avg_Session_Duration_Min'] / 60)

df['Estimated_Active_Days'].head()

"""## Usage Frequency"""

df['Days_Since_Signup'] = (df['Last_Login'] - df['Signup_Date']).dt.days
df['Sessions_per_Day'] = df['Total_Play_Sessions'] / df['Days_Since_Signup']

df['Days_Since_Signup'].head()

df['Sessions_per_Day'].head()

"""## Session Consistency"""

df['Play_Intensity'] = df['Total_Hours_Played'] / df['Total_Play_Sessions']

df['Play_Intensity']

"""## Churn Indicators
Long Gaps Since Signup
"""

df['Days_Active'] = (df['Last_Login'] - df['Signup_Date']).dt.days

df['Days_Active'].tail()

"""Low Session Volume"""

df[df['Total_Play_Sessions'] < 5]

"""Short Average Session Duration"""

df[df['Avg_Session_Duration_Min'] < 5].head()

"""## Recent Inactivity"""

df['Days_Since_Last_Login'] = (pd.Timestamp.today() - df['Last_Login']).dt.days

df['Days_Since_Last_Login']

"""## High-Value User Characteristics"""

high_value = df[df['Total_Revenue_USD'] > df['Total_Revenue_USD'].quantile(0.90)]

high_value.head()

"""## High-Retention User Characteristics

**Long active span:**
"""

df['Active_Days'] = (df['Last_Login'] - df['Signup_Date']).dt.days

df['Active_Days'].head()

"""**Frequent sessions:**"""

df['Sessions_per_Day'] = df['Total_Play_Sessions'] / df['Active_Days']

df['Sessions_per_Day'].head()

"""## Combine: High Value + High Retention"""

df['High_Value'] = df['Total_Revenue_USD'] > df['Total_Revenue_USD'].quantile(0.90)
df['High_Retention'] = df['Active_Days'] > 30

df['High_Value'].head()

df['High_Retention'].head()

df.to_excel("CleanMatiks.xlsx")

pd.read_excel("CleanMatiks.xlsx").head()





"""**RETENTION IMPROVEMENT STRATEGIES**
1. Engage Dormant Users with Targeted Re-activation

  Why: Users inactive for 7–30 days show early churn risk.

  How: Push/email campaigns with incentives (e.g., “Come back and get 2x XP”)

=> Personalized reminders based on preferred game mode or device

=> Target Segment: Days_Since_Last_Login > 7 and Total_Play_Sessions < 5

2. Onboard Low-Session Users More Effectively

   Why: Many users have short average session durations or low play counts.

   How:Add tooltips/tutorials for early sessions

   Offer immediate small rewards for completing first 3–5 sessions

=> Focus on Avg_Session_Duration_Min < 5 and Total_Play_Sessions < 5

3. Promote "Sticky" Game Modes
  
   Why: Certain Preferred_Game_Modes correlate with higher retention and revenue.

   How:Highlight those modes in the home screen for new or low-engagement users

   Use A/B testing to promote game modes with higher average session time

=> Leverage usage data to identify most engaging game modes

==> **REVENUE GROWTH STRATEGIES**
4. Upsell to High-Retention Freemium Users

   Why: Some users engage deeply without paying.

   How:Identify freemium users with Active_Days > 30 and Sessions_per_Day > 0.7

   Offer premium trial or exclusive content discounts

==> Segment: High-retention, freemium users

5. Reward Power Users (Top 10%)

   Why: Top 10% users drive disproportionate revenue
   
   How:Launch loyalty program with exclusive skins, leaderboards, and early access

   Personalized "thank you" offers

=> Segment: Total_Revenue_USD > 90th percentile

6. Optimize Device-Specific Experience
   Why: Revenue and engagement vary by Device_Type

   How:Refine UX for top-performing device (e.g., mobile vs. desktop)

  Test layout changes to boost session duration on weaker devices

=> Use breakdown analysis to prioritize devices with high user base low   ARPU
"""